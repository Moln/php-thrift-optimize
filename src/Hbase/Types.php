<?php
namespace Hbase;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
use Thrift\Exception\TException;
use Thrift\Type\TType;


final class TDeleteType
{
    const DELETE_COLUMN  = 0;
    const DELETE_COLUMNS = 1;
    static public $__names = array(
        0 => 'DELETE_COLUMN',
        1 => 'DELETE_COLUMNS',
    );
}

final class TDurability
{
    const SKIP_WAL  = 1;
    const ASYNC_WAL = 2;
    const SYNC_WAL  = 3;
    const FSYNC_WAL = 4;
    static public $__names = array(
        1 => 'SKIP_WAL',
        2 => 'ASYNC_WAL',
        3 => 'SYNC_WAL',
        4 => 'FSYNC_WAL',
    );
}

class TTimeRange
{
    static $_TSPEC;

    public $minStamp = null;
    public $maxStamp = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'minStamp',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var'  => 'maxStamp',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['minStamp'])) {
                $this->minStamp = $vals['minStamp'];
            }
            if (isset($vals['maxStamp'])) {
                $this->maxStamp = $vals['maxStamp'];
            }
        }
    }

    public function getName()
    {
        return 'TTimeRange';
    }


}

class TColumn
{
    static $_TSPEC;

    public $family = null;
    public $qualifier = null;
    public $timestamp = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'family',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'  => 'qualifier',
                    'type' => TType::STRING,
                ),
                3 => array(
                    'var'  => 'timestamp',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['family'])) {
                $this->family = $vals['family'];
            }
            if (isset($vals['qualifier'])) {
                $this->qualifier = $vals['qualifier'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
        }
    }

    public function getName()
    {
        return 'TColumn';
    }


}

class TColumnValue
{
    static $_TSPEC;

    public $family = null;
    public $qualifier = null;
    public $value = null;
    public $timestamp = null;
    public $tags = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'family',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'  => 'qualifier',
                    'type' => TType::STRING,
                ),
                3 => array(
                    'var'  => 'value',
                    'type' => TType::STRING,
                ),
                4 => array(
                    'var'  => 'timestamp',
                    'type' => TType::I64,
                ),
                5 => array(
                    'var'  => 'tags',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['family'])) {
                $this->family = $vals['family'];
            }
            if (isset($vals['qualifier'])) {
                $this->qualifier = $vals['qualifier'];
            }
            if (isset($vals['value'])) {
                $this->value = $vals['value'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['tags'])) {
                $this->tags = $vals['tags'];
            }
        }
    }

    public function getName()
    {
        return 'TColumnValue';
    }


}

class TColumnIncrement
{
    static $_TSPEC;

    public $family = null;
    public $qualifier = null;
    public $amount = 1;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'family',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'  => 'qualifier',
                    'type' => TType::STRING,
                ),
                3 => array(
                    'var'  => 'amount',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['family'])) {
                $this->family = $vals['family'];
            }
            if (isset($vals['qualifier'])) {
                $this->qualifier = $vals['qualifier'];
            }
            if (isset($vals['amount'])) {
                $this->amount = $vals['amount'];
            }
        }
    }

    public function getName()
    {
        return 'TColumnIncrement';
    }


}

class TResult
{
    static $_TSPEC;

    public $row = null;
    public $columnValues = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'row',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'   => 'columnValues',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TColumnValue',
                    ),
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['columnValues'])) {
                $this->columnValues = $vals['columnValues'];
            }
        }
    }

    public function getName()
    {
        return 'TResult';
    }


}

class TAuthorization
{
    static $_TSPEC;

    public $labels = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'   => 'labels',
                    'type'  => TType::LST,
                    'etype' => TType::STRING,
                    'elem'  => array(
                        'type' => TType::STRING,
                    ),
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['labels'])) {
                $this->labels = $vals['labels'];
            }
        }
    }

    public function getName()
    {
        return 'TAuthorization';
    }


}

class TCellVisibility
{
    static $_TSPEC;

    public $expression = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'expression',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['expression'])) {
                $this->expression = $vals['expression'];
            }
        }
    }

    public function getName()
    {
        return 'TCellVisibility';
    }


}

class TGet
{
    static $_TSPEC;

    public $row = null;
    public $columns = null;
    public $timestamp = null;
    public $timeRange = null;
    public $maxVersions = null;
    public $filterString = null;
    public $attributes = null;
    public $authorizations = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'row',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'   => 'columns',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TColumn',
                    ),
                ),
                3 => array(
                    'var'  => 'timestamp',
                    'type' => TType::I64,
                ),
                4 => array(
                    'var'   => 'timeRange',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TTimeRange',
                ),
                5 => array(
                    'var'  => 'maxVersions',
                    'type' => TType::I32,
                ),
                6 => array(
                    'var'  => 'filterString',
                    'type' => TType::STRING,
                ),
                7 => array(
                    'var'   => 'attributes',
                    'type'  => TType::MAP,
                    'ktype' => TType::STRING,
                    'vtype' => TType::STRING,
                    'key'   => array(
                        'type' => TType::STRING,
                    ),
                    'val'   => array(
                        'type' => TType::STRING,
                    ),
                ),
                8 => array(
                    'var'   => 'authorizations',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TAuthorization',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['timeRange'])) {
                $this->timeRange = $vals['timeRange'];
            }
            if (isset($vals['maxVersions'])) {
                $this->maxVersions = $vals['maxVersions'];
            }
            if (isset($vals['filterString'])) {
                $this->filterString = $vals['filterString'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['authorizations'])) {
                $this->authorizations = $vals['authorizations'];
            }
        }
    }

    public function getName()
    {
        return 'TGet';
    }


}

class TPut
{
    static $_TSPEC;

    public $row = null;
    public $columnValues = null;
    public $timestamp = null;
    public $attributes = null;
    public $durability = null;
    public $cellVisibility = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'row',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'   => 'columnValues',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TColumnValue',
                    ),
                ),
                3 => array(
                    'var'  => 'timestamp',
                    'type' => TType::I64,
                ),
                5 => array(
                    'var'   => 'attributes',
                    'type'  => TType::MAP,
                    'ktype' => TType::STRING,
                    'vtype' => TType::STRING,
                    'key'   => array(
                        'type' => TType::STRING,
                    ),
                    'val'   => array(
                        'type' => TType::STRING,
                    ),
                ),
                6 => array(
                    'var'  => 'durability',
                    'type' => TType::I32,
                ),
                7 => array(
                    'var'   => 'cellVisibility',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TCellVisibility',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['columnValues'])) {
                $this->columnValues = $vals['columnValues'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['durability'])) {
                $this->durability = $vals['durability'];
            }
            if (isset($vals['cellVisibility'])) {
                $this->cellVisibility = $vals['cellVisibility'];
            }
        }
    }

    public function getName()
    {
        return 'TPut';
    }


}

class TDelete
{
    static $_TSPEC;

    public $row = null;
    public $columns = null;
    public $timestamp = null;
    public $deleteType = 1;
    public $attributes = null;
    public $durability = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'row',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'   => 'columns',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TColumn',
                    ),
                ),
                3 => array(
                    'var'  => 'timestamp',
                    'type' => TType::I64,
                ),
                4 => array(
                    'var'  => 'deleteType',
                    'type' => TType::I32,
                ),
                6 => array(
                    'var'   => 'attributes',
                    'type'  => TType::MAP,
                    'ktype' => TType::STRING,
                    'vtype' => TType::STRING,
                    'key'   => array(
                        'type' => TType::STRING,
                    ),
                    'val'   => array(
                        'type' => TType::STRING,
                    ),
                ),
                7 => array(
                    'var'  => 'durability',
                    'type' => TType::I32,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['deleteType'])) {
                $this->deleteType = $vals['deleteType'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['durability'])) {
                $this->durability = $vals['durability'];
            }
        }
    }

    public function getName()
    {
        return 'TDelete';
    }


}

class TIncrement
{
    static $_TSPEC;

    public $row = null;
    public $columns = null;
    public $attributes = null;
    public $durability = null;
    public $cellVisibility = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'row',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'   => 'columns',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TColumnIncrement',
                    ),
                ),
                4 => array(
                    'var'   => 'attributes',
                    'type'  => TType::MAP,
                    'ktype' => TType::STRING,
                    'vtype' => TType::STRING,
                    'key'   => array(
                        'type' => TType::STRING,
                    ),
                    'val'   => array(
                        'type' => TType::STRING,
                    ),
                ),
                5 => array(
                    'var'  => 'durability',
                    'type' => TType::I32,
                ),
                6 => array(
                    'var'   => 'cellVisibility',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TCellVisibility',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['durability'])) {
                $this->durability = $vals['durability'];
            }
            if (isset($vals['cellVisibility'])) {
                $this->cellVisibility = $vals['cellVisibility'];
            }
        }
    }

    public function getName()
    {
        return 'TIncrement';
    }


}

class TAppend
{
    static $_TSPEC;

    public $row = null;
    public $columns = null;
    public $attributes = null;
    public $durability = null;
    public $cellVisibility = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'row',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'   => 'columns',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TColumnValue',
                    ),
                ),
                3 => array(
                    'var'   => 'attributes',
                    'type'  => TType::MAP,
                    'ktype' => TType::STRING,
                    'vtype' => TType::STRING,
                    'key'   => array(
                        'type' => TType::STRING,
                    ),
                    'val'   => array(
                        'type' => TType::STRING,
                    ),
                ),
                4 => array(
                    'var'  => 'durability',
                    'type' => TType::I32,
                ),
                5 => array(
                    'var'   => 'cellVisibility',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TCellVisibility',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['durability'])) {
                $this->durability = $vals['durability'];
            }
            if (isset($vals['cellVisibility'])) {
                $this->cellVisibility = $vals['cellVisibility'];
            }
        }
    }

    public function getName()
    {
        return 'TAppend';
    }


}

class TScan
{
    static $_TSPEC;

    public $startRow = null;
    public $stopRow = null;
    public $columns = null;
    public $caching = null;
    public $maxVersions = 1;
    public $timeRange = null;
    public $filterString = null;
    public $batchSize = null;
    public $attributes = null;
    public $authorizations = null;
    public $reversed = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1  => array(
                    'var'  => 'startRow',
                    'type' => TType::STRING,
                ),
                2  => array(
                    'var'  => 'stopRow',
                    'type' => TType::STRING,
                ),
                3  => array(
                    'var'   => 'columns',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TColumn',
                    ),
                ),
                4  => array(
                    'var'  => 'caching',
                    'type' => TType::I32,
                ),
                5  => array(
                    'var'  => 'maxVersions',
                    'type' => TType::I32,
                ),
                6  => array(
                    'var'   => 'timeRange',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TTimeRange',
                ),
                7  => array(
                    'var'  => 'filterString',
                    'type' => TType::STRING,
                ),
                8  => array(
                    'var'  => 'batchSize',
                    'type' => TType::I32,
                ),
                9  => array(
                    'var'   => 'attributes',
                    'type'  => TType::MAP,
                    'ktype' => TType::STRING,
                    'vtype' => TType::STRING,
                    'key'   => array(
                        'type' => TType::STRING,
                    ),
                    'val'   => array(
                        'type' => TType::STRING,
                    ),
                ),
                10 => array(
                    'var'   => 'authorizations',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TAuthorization',
                ),
                11 => array(
                    'var'  => 'reversed',
                    'type' => TType::BOOL,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['startRow'])) {
                $this->startRow = $vals['startRow'];
            }
            if (isset($vals['stopRow'])) {
                $this->stopRow = $vals['stopRow'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['caching'])) {
                $this->caching = $vals['caching'];
            }
            if (isset($vals['maxVersions'])) {
                $this->maxVersions = $vals['maxVersions'];
            }
            if (isset($vals['timeRange'])) {
                $this->timeRange = $vals['timeRange'];
            }
            if (isset($vals['filterString'])) {
                $this->filterString = $vals['filterString'];
            }
            if (isset($vals['batchSize'])) {
                $this->batchSize = $vals['batchSize'];
            }
            if (isset($vals['attributes'])) {
                $this->attributes = $vals['attributes'];
            }
            if (isset($vals['authorizations'])) {
                $this->authorizations = $vals['authorizations'];
            }
            if (isset($vals['reversed'])) {
                $this->reversed = $vals['reversed'];
            }
        }
    }

    public function getName()
    {
        return 'TScan';
    }


}

class TMutation
{
    static $_TSPEC;

    public $put = null;
    public $deleteSingle = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'   => 'put',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TPut',
                ),
                2 => array(
                    'var'   => 'deleteSingle',
                    'type'  => TType::STRUCT,
                    'class' => '\Hbase\TDelete',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['put'])) {
                $this->put = $vals['put'];
            }
            if (isset($vals['deleteSingle'])) {
                $this->deleteSingle = $vals['deleteSingle'];
            }
        }
    }

    public function getName()
    {
        return 'TMutation';
    }


}

class TRowMutations
{
    static $_TSPEC;

    public $row = null;
    public $mutations = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'row',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var'   => 'mutations',
                    'type'  => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem'  => array(
                        'type'  => TType::STRUCT,
                        'class' => '\Hbase\TMutation',
                    ),
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['row'])) {
                $this->row = $vals['row'];
            }
            if (isset($vals['mutations'])) {
                $this->mutations = $vals['mutations'];
            }
        }
    }

    public function getName()
    {
        return 'TRowMutations';
    }


}

class TIOError extends TException
{
    static $_TSPEC;

    public $message = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'message',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
        }
    }

    public function getName()
    {
        return 'TIOError';
    }


}

class TIllegalArgument extends TException
{
    static $_TSPEC;

    public $message = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var'  => 'message',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
        }
    }

    public function getName()
    {
        return 'TIllegalArgument';
    }


}


